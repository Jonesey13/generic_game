#version 410 core

in float length_vs[];
in float height_vs[];
in vec2 local_position_vs[];
in vec2 position_vs[];
in vec2 tex_coords_min_vs[];
in vec2 tex_coords_max_vs[];
in vec2 scale_vs[];
in mat2 transform_vs[];
in vec4 colour_vs[];

out vec2 rect_pos; // Coordinates Inside the Rectangle
out vec4 colour_ges;
out vec2 tex_pos;

layout(points) in;
layout(triangle_strip, max_vertices = 4) out;

vec4 Transform(in vec2 corner, in vec2 pos, in mat2 transform, in vec2 scale);
	       
void main()
{
  vec2 half_length = vec2(length_vs[0] / 2.0, 0.0);
  vec2 half_height = vec2(0.0, height_vs[0] / 2.0);
  vec2 local_pos = vec2(local_position_vs[0].x, - local_position_vs[0].y);
  gl_Position = Transform( local_pos - half_length - half_height, position_vs[0], transform_vs[0], scale_vs[0]);
  tex_pos = vec2(tex_coords_min_vs[0].x, tex_coords_max_vs[0].y);
  rect_pos =  gl_Position.xy;
  colour_ges = colour_vs[0];
  EmitVertex();
  gl_Position = Transform( local_pos + half_length - half_height, position_vs[0], transform_vs[0], scale_vs[0]);
  tex_pos = vec2(tex_coords_max_vs[0].x, tex_coords_max_vs[0].y);
  rect_pos =  gl_Position.xy;
  colour_ges = colour_vs[0];
  EmitVertex();
  gl_Position = Transform( local_pos - half_length + half_height, position_vs[0], transform_vs[0], scale_vs[0]);
  tex_pos = vec2(tex_coords_min_vs[0].x, tex_coords_min_vs[0].y);
  rect_pos = gl_Position.xy;
  colour_ges = colour_vs[0];
  EmitVertex();
  gl_Position = Transform( local_pos + half_length + half_height, position_vs[0], transform_vs[0], scale_vs[0]);
  tex_pos = vec2(tex_coords_max_vs[0].x, tex_coords_min_vs[0].y);
  rect_pos = gl_Position.xy;
  colour_ges = colour_vs[0];
  EmitVertex();

  EndPrimitive();
}

vec4 Transform(in vec2 corner, in vec2 pos, in mat2 transform, in vec2 scale)
{
  vec2 scaled_corner = scale * corner;
  vec2 transformed_corner = transform * scaled_corner;
  vec2 translated = pos + transformed_corner;
  return vec4(translated.xy, 0.0, 1.0);
}
